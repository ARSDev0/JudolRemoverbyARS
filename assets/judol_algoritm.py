"""
GamblingAdDetector - Alpha-1.5 by Awiones
https://github.com/awiones
"""

__version__ = "Alpha-1.5"


import re
import unicodedata
from collections import Counter
import string
import itertools
from typing import Dict, List, Tuple, Set, Optional, Union, Any


class GamblingAdDetector:
    """
    Advanced gambling advertisement detector that identifies various patterns
    commonly found in gambling spam across different languages and formats.
    Includes enhanced detection for randomly generated names and obfuscation techniques.

    Version: Alpha-1.5 by Awiones
    https://github.com/awiones
    """
    
    def __init__(self):
        # Core gambling keywords (significantly expanded)
        self.keywords = set()
        # Domain TLDs commonly used in gambling sites (expanded)
        self.suspicious_tlds = set()
        # Common name patterns used in gambling sites
        self.name_patterns = []
        # Suspicious character repetition (e.g., "$$$$")
        self.suspicious_chars = set()
        # Common number patterns in gambling site names
        self.common_numbers = set()
        # Common obfuscation techniques
        self.obfuscation_chars = {}
        # Threshold for scoring system
        self.threshold = 0.6
        # Compile regex patterns for better performance
        self._compile_patterns()
        
    def _compile_patterns(self):
        """Compile regex patterns for better performance"""
        # Pattern: keyword + 3/4 digit number (e.g., toto8080, gacor666)
        self.keyword_number_pattern = re.compile(
            r'({})\d{{2,6}}'.format('|'.join(self.keywords)), 
            re.IGNORECASE
        )
        
        # Pattern: number + keyword (e.g., 888bet, 77slot)
        self.number_keyword_pattern = re.compile(
            r'\d{{2,6}}({})'.format('|'.join(self.keywords)),
            re.IGNORECASE
        )
        
        # Pattern: domain-like with suspicious TLD
        tld_pattern = '|'.join(self.suspicious_tlds)
        self.domain_pattern = re.compile(
            r'\b[\w-]+\.({})\b'.format(tld_pattern),
            re.IGNORECASE
        )
        
        # Pattern: WhatsApp/Telegram contact patterns
        self.contact_pattern = re.compile(
            r'(wa|whatsapp|telegram|tg|line|signal|chat|wechat|kakao|viber|fb|facebook|ig|instagram|dm|pm|sms|text|call|hubungi|kontak|contact)(.{0,5})?[:.]?(.{0,5})?\+?\d{8,15}',
            re.IGNORECASE
        )
        
        # Pattern: Percentage offers (e.g., "100% bonus")
        self.percentage_pattern = re.compile(
            r'\d{1,3}\s?%\s?(bonus|deposit|kemenangan|win|hadiah|cashback|diskon|potongan|rebate|komisi|rollingan|turnover|welcome|new|member)',
            re.IGNORECASE
        )
        
        # Pattern: Money symbols with numbers
        self.money_pattern = re.compile(
            r'(rp\.?|idr|usd|\$|‚Ç¨|¬£|¬•|‚Çπ|‚ÇΩ|‚Ç©|‚Ç´|‡∏ø|‚Ç±|‚Ç¥|‚Ç∏|‚Çº|‚Çæ|‚Ç∫|‚Ç¶|‚Ç°|‚Ç≤|‚Ç¥|‚Ç∏|‚Çº|‚Çæ|‚Ç∫|‚Ç¶|‚Ç°|‚Ç≤)\s?\d[\d\.,]*\s?(juta|ribu|rb|k|m|b|t|million|billion|trillion|thousand)?',
            re.IGNORECASE
        )
        
        # Pattern: Repetitive characters (e.g., "$$$$", "!!!!!")
        self.repetitive_pattern = re.compile(r'(.)\1{3,}')
        
        # Pattern: Common gambling site name patterns
        name_pattern_parts = []
        for prefix, infix, suffix in self.name_patterns:
            if prefix and infix and suffix:
                name_pattern_parts.append(f"{prefix}[\\w-]*{infix}[\\w-]*{suffix}")
            elif prefix and infix:
                name_pattern_parts.append(f"{prefix}[\\w-]*{infix}")
            elif infix and suffix:
                name_pattern_parts.append(f"{infix}[\\w-]*{suffix}")
            elif prefix and suffix:
                name_pattern_parts.append(f"{prefix}[\\w-]*{suffix}")
            elif prefix:
                name_pattern_parts.append(f"{prefix}[\\w-]+")
            elif infix:
                name_pattern_parts.append(f"[\\w-]*{infix}[\\w-]*")
            elif suffix:
                name_pattern_parts.append(f"[\\w-]+{suffix}")
        
        self.name_pattern = re.compile(
            r'\b({})\b'.format('|'.join(name_pattern_parts)),
            re.IGNORECASE
        )
        
        # Pattern: Common number patterns in gambling sites
        self.number_pattern = re.compile(
            r'\b({})\b'.format('|'.join(self.common_numbers)),
            re.IGNORECASE
        )
        
        # Pattern: URL shorteners commonly used in gambling ads
        self.url_shortener_pattern = re.compile(
            r'\b(bit\.ly|tinyurl\.com|goo\.gl|t\.co|is\.gd|cli\.gs|ow\.ly|adfly|adf\.ly|shorturl\.at|cutt\.ly|tiny\.cc|tinyurl|rebrand\.ly|buff\.ly|snip\.ly|bl\.ink|short\.io)\b',
            re.IGNORECASE
        )
        
        # Pattern: Link text patterns
        self.link_text_pattern = re.compile(
            r'\b(klik|click|tap|tekan|pencet|kunjungi|visit|akses|access|buka|open|masuk|enter|join|gabung|daftar|register|link|url|website|situs|alternatif|alternative|resmi|official|terbaru|newest|terkini|updated)\b',
            re.IGNORECASE
        )
        
        # Pattern: Time availability patterns
        self.time_pattern = re.compile(
            r'\b(24\s?jam|24\s?hour|24\s?h|24\/7|nonstop|non\s?stop|online24jam|jam24|h24|selalu\s?online|always\s?online|setiap\s?hari|setiap\s?saat|kapan\s?saja|kapan\s?pun)\b',
            re.IGNORECASE
        )
        
        # Pattern: Support contact patterns
        self.support_pattern = re.compile(
            r'\b(cs|customer\s?service|customer\s?support|layanan\s?pelanggan|bantuan|help|support|livechat|live\s?chat|admin|operator|staff|pelayanan|layanan|contact|kontak)\b',
            re.IGNORECASE
        )
        
        # Pattern: Promotional language patterns
        self.promo_pattern = re.compile(
            r'\b(promo|promosi|bonus|diskon|discount|cashback|rebate|rollingan|turnover|komisi|referral|affiliate|member|vip|welcome|newmember|new\s?member|harian|daily|mingguan|weekly|bulanan|monthly|gratis|free|extra)\b',
            re.IGNORECASE
        )
        
        # Pattern: Trust signal patterns
        self.trust_pattern = re.compile(
            r'\b(terpercaya|trusted|aman|safe|secure|resmi|official|terbaik|best|recommended|direkomendasikan|terbukti|proven|terjamin|guaranteed|legal|lisensi|license|verified|terverifikasi|fair|adil)\b',
            re.IGNORECASE
        )
        
        # Pattern: Urgency patterns
        self.urgency_pattern = re.compile(
            r'\b(segera|hurry|cepat|quick|langsung|direct|sekarang|now|jangan|don\'t|tunggu|wait|buruan|hurry|terbatas|limited|special|spesial|khusus|exclusive|eksklusif)\b',
            re.IGNORECASE
        )
        
        # Pattern: Common provider names
        self.provider_pattern = re.compile(
            r'\b(pragmatic|habanero|spadegaming|microgaming|playtech|pgsoft|joker|netent|playngo|redtiger|evolution|idnlive|idnpoker|idnslot|idnsport|bti|sbobet|cmd368|opus|saba|wbet|allbet|dreamgaming|sexygaming|biggaming|asiagaming|ebet|ezugi|gameplay|cq9|jdb|jili|kagaming|live22|playstar|skywind|spade|toptrend|virtualtech|yggdrasil)\b',
            re.IGNORECASE
        )
        
        # Pattern: Obfuscated text (using special characters to replace letters)
        obfuscation_pattern_parts = []
        for char, replacements in self.obfuscation_chars.items():
            for replacement in replacements:
                obfuscation_pattern_parts.append(f"{replacement}")

        if obfuscation_pattern_parts:
            self.obfuscation_pattern = re.compile(
                r'[{}]'.format(''.join(obfuscation_pattern_parts)),
                re.IGNORECASE
            )
        else:
            self.obfuscation_pattern = None
        
    def normalize_text(self, text: str) -> str:
        """
        Normalize text by removing spaces, converting to lowercase,
        and normalizing Unicode characters.
        """
        # Remove spaces and join characters
        text = ''.join(text.split())
        # Convert to normal form (NFKC) to handle fullwidth and stylized fonts
        text = unicodedata.normalize('NFKC', text)
        return text.lower()
    
    def extract_words(self, text: str) -> List[str]:
        """
        Extract all "words" from text, handling various separators.
        """
        # Remove non-letter/number except spaces
        cleaned = re.sub(r'[^\w\s]', ' ', text)
        # Split by spaces and filter empty strings
        return [word for word in cleaned.split() if word]
    
    def get_ascii_equivalent(self, text: str) -> str:
        """
        Convert Unicode characters to their closest ASCII equivalents.
        """
        # Convert each char to closest ASCII if possible
        ascii_text = ''.join(
            c for c in unicodedata.normalize('NFKD', text)
            if not unicodedata.combining(c)
        )
        return ascii_text
    

    def deobfuscate_text(self, text: str) -> str:
        """
        Attempt to deobfuscate text by replacing common character substitutions.
        """
        deobfuscated = text.lower()
        
        # Replace common character substitutions
        char_map = {
            '4': 'a', '@': 'a', '8': 'b', '(': 'c', '3': 'e', '‚Ç¨': 'e',
            '6': 'g', '9': 'g', '1': 'i', '!': 'i', '|': 'i', '0': 'o',
            '5': 's', '$': 's', '7': 't', '+': 't', '2': 'z', '√ü': 'b',
            '¬µ': 'u', '¬•': 'y',
            # Additional character substitutions
            '‚ÇΩ': 'p', '‚Ç±': 'p', '‚Çπ': 'r', '‚Ç≥': 'a', '‚Ç¥': 's',
            '‚Ç≠': 'k', '‚Ç¶': 'n', '‚Ç©': 'w', '‚ÇÆ': 't', '‚Ç≤': 'g',
            '‚Çµ': 'c', '‚Ç∏': 't', '‚Çº': 'm', '‚Çæ': 'l', '‚ÑÉ': 'c',
            '‚Ñâ': 'f', '‚Ñó': 'p', '‚Ñ†': 'sm', '‚Ñ°': 'tel', '‚Ñ¢': 'tm',
            '‚Ñß': 'u', '‚ÑÆ': 'e', '‚Ñ∞': 'e', '‚Ñ±': 'f', '‚Ñ≥': 'm',
            '‚Ñ¥': 'o', '‚Öì': '1/3', '‚Öî': '2/3', '‚Öï': '1/5',
            # Stylized letters
            'ùêö': 'a', 'ùêõ': 'b', 'ùêú': 'c', 'ùêù': 'd', 'ùêû': 'e',
            'ùêü': 'f', 'ùê†': 'g', 'ùê°': 'h', 'ùê¢': 'i', 'ùê£': 'j',
            'ùê§': 'k', 'ùê•': 'l', 'ùê¶': 'm', 'ùêß': 'n', 'ùê®': 'o',
            'ùê©': 'p', 'ùê™': 'q', 'ùê´': 'r', 'ùê¨': 's', 'ùê≠': 't',
            'ùêÆ': 'u', 'ùêØ': 'v', 'ùê∞': 'w', 'ùê±': 'x', 'ùê≤': 'y', 'ùê≥': 'z',
            # Bold letters
            'ùóÆ': 'a', 'ùóØ': 'b', 'ùó∞': 'c', 'ùó±': 'd', 'ùó≤': 'e',
            'ùó≥': 'f', 'ùó¥': 'g', 'ùóµ': 'h', 'ùó∂': 'i', 'ùó∑': 'j',
            'ùó∏': 'k', 'ùóπ': 'l', 'ùó∫': 'm', 'ùóª': 'n', 'ùóº': 'o',
            'ùóΩ': 'p', 'ùóæ': 'q', 'ùóø': 'r', 'ùòÄ': 's', 'ùòÅ': 't',
            'ùòÇ': 'u', 'ùòÉ': 'v', 'ùòÑ': 'w', 'ùòÖ': 'x', 'ùòÜ': 'y', 'ùòá': 'z',
            # Italic letters
            'ùò¢': 'a', 'ùò£': 'b', 'ùò§': 'c', 'ùò•': 'd', 'ùò¶': 'e',
            'ùòß': 'f', 'ùò®': 'g', 'ùò©': 'h', 'ùò™': 'i', 'ùò´': 'j',
            'ùò¨': 'k', 'ùò≠': 'l', 'ùòÆ': 'm', 'ùòØ': 'n', 'ùò∞': 'o',
            'ùò±': 'p', 'ùò≤': 'q', 'ùò≥': 'r', 'ùò¥': 's', 'ùòµ': 't',
            'ùò∂': 'u', 'ùò∑': 'v', 'ùò∏': 'w', 'ùòπ': 'x', 'ùò∫': 'y', 'ùòª': 'z',
            # Script letters
            'ùì™': 'a', 'ùì´': 'b', 'ùì¨': 'c', 'ùì≠': 'd', 'ùìÆ': 'e',
            'ùìØ': 'f', 'ùì∞': 'g', 'ùì±': 'h', 'ùì≤': 'i', 'ùì≥': 'j',
            'ùì¥': 'k', 'ùìµ': 'l', 'ùì∂': 'm', 'ùì∑': 'n', 'ùì∏': 'o',
            'ùìπ': 'p', 'ùì∫': 'q', 'ùìª': 'r', 'ùìº': 's', 'ùìΩ': 't',
            'ùìæ': 'u', 'ùìø': 'v', 'ùîÄ': 'w', 'ùîÅ': 'x', 'ùîÇ': 'y', 'ùîÉ': 'z',
            # Fullwidth characters
            'ÔΩÅ': 'a', 'ÔΩÇ': 'b', 'ÔΩÉ': 'c', 'ÔΩÑ': 'd', 'ÔΩÖ': 'e',
            'ÔΩÜ': 'f', 'ÔΩá': 'g', 'ÔΩà': 'h', 'ÔΩâ': 'i', 'ÔΩä': 'j',
            'ÔΩã': 'k', 'ÔΩå': 'l', 'ÔΩç': 'm', 'ÔΩé': 'n', 'ÔΩè': 'o',
            'ÔΩê': 'p', 'ÔΩë': 'q', 'ÔΩí': 'r', 'ÔΩì': 's', 'ÔΩî': 't',
            'ÔΩï': 'u', 'ÔΩñ': 'v', 'ÔΩó': 'w', 'ÔΩò': 'x', 'ÔΩô': 'y', 'ÔΩö': 'z',
            # Circled letters
            '‚ìê': 'a', '‚ìë': 'b', '‚ìí': 'c', '‚ìì': 'd', '‚ìî': 'e',
            '‚ìï': 'f', '‚ìñ': 'g', '‚ìó': 'h', '‚ìò': 'i', '‚ìô': 'j',
            '‚ìö': 'k', '‚ìõ': 'l', '‚ìú': 'm', '‚ìù': 'n', '‚ìû': 'o',
            '‚ìü': 'p', '‚ì†': 'q', '‚ì°': 'r', '‚ì¢': 's', '‚ì£': 't',
            '‚ì§': 'u', '‚ì•': 'v', '‚ì¶': 'w', '‚ìß': 'x', '‚ì®': 'y', '‚ì©': 'z',
            # Common number substitutions in gambling ads
            '‚ìµ': '1', '‚ì∂': '2', '‚ì∑': '3', '‚ì∏': '4', '‚ìπ': '5',
            '‚ì∫': '6', '‚ìª': '7', '‚ìº': '8', '‚ìΩ': '9', '‚ìæ': '10',
            '‚ë†': '1', '‚ë°': '2', '‚ë¢': '3', '‚ë£': '4', '‚ë§': '5',
            '‚ë•': '6', '‚ë¶': '7', '‚ëß': '8', '‚ë®': '9', '‚ë©': '10',
            # Accented characters
            '√°': 'a', '√†': 'a', '√¢': 'a', '√§': 'a', '√£': 'a', '√•': 'a',
            '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
            '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
            '√≥': 'o', '√≤': 'o', '√¥': 'o', '√∂': 'o', '√µ': 'o',
            '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
            '√Ω': 'y', '√ø': 'y',
            '√ß': 'c', '√±': 'n',
            # Common gambling site name obfuscations
            '‚ÇÆ‚óã‚ÇÆ‚óã': 'toto', '‚Ç≤‚Ç≥‚Çµ‚óã‚±§': 'gacor', '$≈Å√ò‚ÇÆ': 'slot', 'ƒ¥…Ñƒê≈Ç': 'judi',
            '√á‚Ç≥$≈Ç‚±§√ò': 'casino', '…à‚Ç≥√á“ú‚Ç±√ò‚ÇÆ': 'jackpot', '‚±Æ‚±Ø”æ‚Ç©≈Ç‚±§': 'maxwin',
            '‚±§‚ÇÆ‚Ç±': 'rtp', '‚Ç±√ò≈Å‚Ç≥': 'pola', '$‚Ç±≈Ç‚±§': 'spin', '∆Ä…Ü‚ÇÆ': 'bet',
            '∆Ä√ò≈Å‚Ç≥': 'bola', '‚Ç±√ò“ú…Ü‚±§': 'poker', '≈Å√ò‚ÇÆ‚ÇÆ…Ü‚±§…é': 'lottery',
            '‚ÇÆ√ò‚Ç≤…Ü≈Å': 'togel', 'V…Ü‚Ç≤‚Ç≥$': 'vegas'
        }
        
        # Apply character substitutions
        for obfuscated, clear in char_map.items():
            deobfuscated = deobfuscated.replace(obfuscated, clear)
        
        # Handle zero-width spaces and other invisible characters
        invisible_chars = ['\u200b', '\u200c', '\u200d', '\u2060', '\u2061', '\u2062', '\u2063', '\u2064', '\ufeff']
        for char in invisible_chars:
            deobfuscated = deobfuscated.replace(char, '')
        
        # Normalize spacing (remove excessive spaces)
        deobfuscated = re.sub(r'\s+', ' ', deobfuscated)
        
        # Handle deliberate spacing between letters (e.g., "T O T O")
        # First check for patterns like "X Y Z" where X, Y, Z are single letters
        spaced_word_pattern = re.compile(r'\b([a-z])\s+([a-z])\s+([a-z])\s+([a-z])\b')
        while spaced_word_pattern.search(deobfuscated):
            deobfuscated = spaced_word_pattern.sub(r'\1\2\3\4', deobfuscated)
        
        # Handle shorter patterns
        spaced_word_pattern = re.compile(r'\b([a-z])\s+([a-z])\s+([a-z])\b')
        while spaced_word_pattern.search(deobfuscated):
            deobfuscated = spaced_word_pattern.sub(r'\1\2\3', deobfuscated)
        
        # Handle two-letter patterns
        spaced_word_pattern = re.compile(r'\b([a-z])\s+([a-z])\b')
        while spaced_word_pattern.search(deobfuscated):
            deobfuscated = spaced_word_pattern.sub(r'\1\2', deobfuscated)
        
        # Handle digit spacing in common patterns (e.g., "8 0 8 0")
        spaced_digits_pattern = re.compile(r'\b(\d)\s+(\d)\s+(\d)\s+(\d)\b')
        while spaced_digits_pattern.search(deobfuscated):
            deobfuscated = spaced_digits_pattern.sub(r'\1\2\3\4', deobfuscated)
        
        # Handle shorter digit patterns
        spaced_digits_pattern = re.compile(r'\b(\d)\s+(\d)\s+(\d)\b')
        while spaced_digits_pattern.search(deobfuscated):
            deobfuscated = spaced_digits_pattern.sub(r'\1\2\3', deobfuscated)
        
        # Handle two-digit patterns
        spaced_digits_pattern = re.compile(r'\b(\d)\s+(\d)\b')
        while spaced_digits_pattern.search(deobfuscated):
            deobfuscated = spaced_digits_pattern.sub(r'\1\2', deobfuscated)
        
        # Handle mixed letter-digit patterns (e.g., "T O T O 8 8")
        mixed_pattern = re.compile(r'\b([a-z])\s+([a-z])\s+([a-z])\s+([a-z])\s+(\d)\s+(\d)\b')
        while mixed_pattern.search(deobfuscated):
            deobfuscated = mixed_pattern.sub(r'\1\2\3\4\5\6', deobfuscated)
        
        # Handle common gambling site name variations with dots or dashes
        site_pattern = re.compile(r'\b(t[o0]t[o0]|g[a4]c[o0]r|sl[o0]t|jud[i1]|c[a4]s[i1]n[o0]|j[a4]ckp[o0]t|m[a4]xw[i1]n|rtp|p[o0]l[a4]|sp[i1]n|b[e3]t|b[o0]l[a4])[-_.]([\w\d]{3,5})\b')
        deobfuscated = site_pattern.sub(r'\1\2', deobfuscated)
        
        # Handle common gambling site name variations with numbers
        site_num_pattern = re.compile(r'\b(t[o0]t[o0]|g[a4]c[o0]r|sl[o0]t|jud[i1]|c[a4]s[i1]n[o0]|j[a4]ckp[o0]t|m[a4]xw[i1]n)[-_.]?(\d{3,4})\b')
        deobfuscated = site_num_pattern.sub(r'\1\2', deobfuscated)
        
        # Handle common gambling terms with deliberate misspellings
        misspellings = {
            'totoo': 'toto', 'totto': 'toto', 't0t0': 'toto', 't0to': 'toto', 'tot0': 'toto',
            'gacorr': 'gacor', 'gac0r': 'gacor', 'gacoor': 'gacor', 'gakor': 'gacor',
            'slott': 'slot', 'sl0t': 'slot', 'sloot': 'slot', 'slt': 'slot',
            'judii': 'judi', 'jud1': 'judi', 'juudi': 'judi', 'jdi': 'judi',
            'casinoo': 'casino', 'cas1no': 'casino', 'casin0': 'casino', 'kasino': 'casino',
            'jackpott': 'jackpot', 'jackp0t': 'jackpot', 'jakpot': 'jackpot',
            'maxwinn': 'maxwin', 'maxw1n': 'maxwin', 'maxw1nn': 'maxwin',
            'rtpp': 'rtp', 'r.t.p': 'rtp', 'r-t-p': 'rtp',
            'polaa': 'pola', 'p0la': 'pola', 'poola': 'pola',
            'spinn': 'spin', 'sp1n': 'spin', 'spiin': 'spin',
            'bett': 'bet', 'b3t': 'bet', 'beet': 'bet',
            'bolaa': 'bola', 'b0la': 'bola', 'boola': 'bola'
        }
        
        for misspelled, correct in misspellings.items():
            deobfuscated = re.sub(r'\b' + misspelled + r'\b', correct, deobfuscated)
        
        return deobfuscated
